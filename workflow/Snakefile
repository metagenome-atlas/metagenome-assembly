from pathlib import Path
import pandas as pd
import os,sys

# absolute path to snakemake dir
snakemake_dir = Path(workflow.snakefile).parent.resolve()

# include default config values
configfile: snakemake_dir.parent /"config/default_confg.yaml"

# global variables
PAIRED_END = bool(config["paired_end"])

logger.debug(f"Reads are: {'paired' if PAIRED_END else 'single-end'}")

MULTIFILE_FRACTIONS= ["R1", "R2", "se"] if PAIRED_END else ["se"]

include: "rules/functions.smk"

## Input

def get_quality_controlled_reads(wildcards):

    return expand(
        "{sample}/sequence_quality_control/{sample}_QC_{fraction}.fastq.gz",
        fraction=MULTIFILE_FRACTIONS,
        sample=wildcards.sample,
    )



### Target rules


rule all:
    input:
        expand("{sample}/finished_assembly", sample=get_all_samples()),
    output:
        temp(touch("finished_assembly")),


rule assembly_one_sample:
    input:
        "{sample}/{sample}_contigs.fasta",
        "{sample}/sequence_alignment/{sample}.bam",
        "{sample}/assembly/contig_stats/postfilter_coverage_stats.txt",
        "{sample}/assembly/contig_stats/prefilter_contig_stats.txt",
        "{sample}/assembly/contig_stats/final_contig_stats.txt",
    output:
        touch("{sample}/finished_assembly"),



# decide wich assembler to use

if config["assembler"] == "megahit":
    
    include: "rules/megahit.smk"
    raw_assembly = "{sample}/assembly/megahit/{sample}_prefilter.contigs.fa"

elif config["assembler"] == "spades":
    include: "rules/spades.smk"
    
    if config["spades_use_scaffolds"]:
        raw_assembly = "{sample}/assembly/scaffolds.fasta"
    else:
        raw_assembly = "{sample}/assembly/contigs.fasta"

else:
    raise ValueError("Invalid assembler specified in config file")

### Rules
include: "rules/pre_assembly.smk"
include: "rules/post_assembly.smk"


logger.debug(f"Assembly fractions are: {ASSEMBLY_FRACTIONS}")





